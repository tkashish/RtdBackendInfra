---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyPairName:
    Type: String
    Description: Key Pair Name    # optional, string, description of parameter value
    Default: codedeploytest    # optional
  MinCount:
    Description: "Min number of Amazon EC2 instances in an autoscaling group."
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 3
  MaxCount:
    Description: "Max number of Amazon EC2 instances in an autoscaling group."
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 3
  DesiredCount:
    Description: "Desired number of Amazon EC2 instances in an autoscaling group."
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 3
Mappings:
  RegionOS2AMI:
    "us-east-1":
     Linux: "ami-b73b63a0"
    "us-west-2":
     Linux: "ami-6cd6f714"

Resources:
  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"
  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Count:
        Ref: DesiredCount
      Handle:
        Ref: WaitHandle
      Timeout: 1800
  BlueGreenLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      # AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: InstanceRoleInstanceProfile
      ImageId:
        Fn::FindInMap:
          - RegionOS2AMI
          - Ref: "AWS::Region"
          - Linux
      InstanceType: "t2.micro"
      KeyName:
        Ref: KeyPairName
      SecurityGroups:
        - Ref: SecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -ex\n"
              - "yum install -y aws-cfn-bootstrap\n"
              - "yum install -y httpd\n"
              - "echo hello lb| sudo tee --append /var/www/html/index.html \n"
              - "service httpd start\n"
              - "yum install -y ruby\n"
              - "yum install -y aws-cli\n"
              - "# Helper function.\n"
              - "function error_exit\n"
              - "{\n"
              - "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" "
              - { "Fn::Base64" : {"Ref":"WaitHandle"}}
              - "\n"
              - "  exit 1\n"
              - "}\n"
              - "# Install the AWS CodeDeploy Agent.\n"
              - "cd /home/ec2-user/\n"
              - "aws configure set default.s3.signature_version s3v4 || error_exit 'Failed to set aws cli signature to version 4'\n"
              - "aws s3 cp 's3://aws-codedeploy-us-west-2/latest/codedeploy-agent.noarch.rpm' . --region us-west-2 || error_exit 'Failed to download AWS CodeDeploy Agent.'\n"
              - "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n"
              - "# All is well, so signal success.\n"
              - "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" "
              - { "Fn::Base64" : {"Ref":"WaitHandle"}}
              - "\n"
  BlueGreenAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName:
        Ref: BlueGreenLaunchConfiguration
      LoadBalancerNames:
        - Ref: LoadBalancer
      MaxSize:
        Ref: MaxCount
      MinSize:
        Ref: MinCount
      DesiredCapacity:
        Ref: DesiredCount
      VPCZoneIdentifier:
        - Fn::ImportValue: {'Fn::Sub': '${NetworkStackName}-PublicSubnetId'}

Outputs:
  AutoScalingGroup:      #
    Description: Auto scaling group id  # optional, string describing the output
    Value:
      Ref: BlueGreenAutoScalingGroup    # required, value of the output
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-BlueGreenAutoScalingGroupId"
